<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Dec 16, 2009 11:15:50 AM                                                        

     Abstract Build File for Ivy-based Builds. 
     
     This file defines the common tasks required for any Java project:
     {clean, compile, run-tests, jar, etc.}
     
     Further, this file defines tasks that enable multiple Java projects
     to be built as part of a larger project.
     
     WARNING: Changing this file will affect all build.xml files
     	that import it.
                   
     tself                                                                
     ====================================================================== -->
<project name="abstract-ivy-build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- ============= PROPERTIES ================ -->

	<!-- This is usually the root of your repository. Each sub-project
	     will need to override this value BEFORE importing this file. -->
	<property name="main.project.root.dir" location="../" />

	<!-- Change this to bbn.[CONTAINING-PROJECT] (e.g bbn.asio)
	     All sub-projects will be published using this organization name -->
	<property name="project.organization" value="com.bbn.c2s2" />

	<!-- Source and Dependencies -->
	<property name="lib.dir" value="lib" />
	<property name="src.dir" value="src" />
	<property name="tests.src.dir" value="test" />
	<property name="config.dir" value="conf" />
	<property name="root.config.dir" value="${main.project.root.dir}/conf" />
	<property name="root.drive" location="/" />

	<!-- Target and Artifacts -->
	<property name="target.dir" value="target" />
	<property name="build.dir" value="${target.dir}/bin" />
	<property name="tests.build.dir" value="${target.dir}/test-bin" />
	<property name="reports.dir" value="${main.project.root.dir}/${target.dir}/reports" />
	<property name="root.artifacts.dir" value="${main.project.root.dir}/${target.dir}/artifacts" />
	<property name="artifacts.dir" value="${target.dir}/artifacts" />
	<property name="javadoc.dir" value="${target.dir}/doc" />
	<property name="javadoc.zip.file" value="${artifacts.dir}/${ant.project.name}-javadoc.zip" />
	<property name="generated.src.dir" value="${target.dir}/gen" />
	<property name="manifest.file" value="${target.dir}/MANIFEST.MF" />
	<property name="jar.file" value="${artifacts.dir}/${ant.project.name}.jar" />

	<!-- Cobertura properties -->
	<property name="cobertura.dir" value="${target.dir}/cobertura" />
	<property name="instrumented.classes.dir" value="${cobertura.dir}/instrumented" />
	<property name="cobertura.datafile" value="${cobertura.dir}/cobertura.ser" />

	<!-- Checkstyle properties -->
	<property name="checkstyle.config" value="${root.config.dir}/checkstyle.xml" />
	<property name="checkstyle.java.header" value="${root.config.dir}/java.header" />

	<!-- Controls the verboseness of the Ivy tasks -->
	<property name="ivy.log.level" value="quiet" />

	<!-- Location of the ivysettings.xml file -->
	<property name="ivy.settings.file" value="${main.project.root.dir}/conf/ivysettings.xml" />

	<!-- Project class path for contents of ${lib.dir} -->
	<path id="libdir.class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- INITIALIZE IVY -->
	<ivy:settings file="${ivy.settings.file}" />

	<!-- =========== IVY ADMIN TASKS =========== -->
	<!-- PRINT IVY REPORT -->
	<target name="ivy-report" description="Resolve Ivy dependencies and print report to STDOUT">
		<ivy:resolve log="${ivy.log.level}" />
		<ivy:report todir="${target.dir}" />
	</target>

	<!-- RESOLVE COMPILE CLASSPATH -->
	<target name="resolve-compile">
		<ivy:cachepath log="${ivy.log.level}" pathid="resolved.class.path" type="jar" />
	</target>

	<!-- RESOLVE TESTS CLASSPATH -->
	<target name="resolve-test">
		<ivy:cachepath log="${ivy.log.level}" pathid="test.class.path" conf="test" type="jar" />
	</target>

	<!-- RETRIEVE RUNTIME DEPENDENCIES -->
	<target name="retrieve" description="Downloads all runtime libraries to ${target.dir}/${lib.dir}">
		<mkdir dir="${target.dir}/${lib.dir}" />
		<ivy:resolve log="${ivy.log.level}" conf="default" />
		<ivy:retrieve sync="false" pattern="${target.dir}/${lib.dir}/[artifact]-[revision].[ext]" type="jar" />
	</target>

	<!-- CLEAR IVY CACHE -->
	<target name="ivy-clean-cache" description="Clears the Ivy cache on this system">
		<ivy:cleancache />
	</target>

	<!-- LOAD COBERTURA -->
	<target name="load-cobertura">
		<ivy:cachepath inline="true" log="${ivy.log.level}" pathid="cobertura.class.path" organisation="net.sourceforge.cobertura" module="cobertura" revision="1.9.4" />

		<taskdef classpathref="cobertura.class.path" resource="tasks.properties" />

	</target>

	<!-- LOAD CHECKSTYLE -->
	<target name="load-checkstyle">
		<ivy:cachepath inline="true" log="${ivy.log.level}" pathid="checkstyle.class.path" organisation="checkstyle" module="checkstyle" revision="5.0" />

		<taskdef classpathref="checkstyle.class.path" resource="checkstyletask.properties" />

	</target>

	<!-- ================= BUILD TARGETS ============ -->
	<!-- CLEAN -->
	<target name="clean" description="Deletes the target directory">
		<delete dir="${target.dir}" />
	</target>

	<!-- CREATE NECESSARY DIRECTORIES -->
	<target name="prep">
		<mkdir dir="${src.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${tests.src.dir}" />
		<mkdir dir="${generated.src.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${artifacts.dir}" />
	</target>

	<!-- GENERATE SOURCE CODE (e.g. JNI, web service stubs, etc.) -->
	<target name="generate-src" depends="prep">
		<!-- override this task in build.xml as needed -->
	</target>

	<!-- COMPILE -->
	<target name="compile" depends="prep, generate-src, resolve-compile" description="Compiles source code">
		<echo level="info">
			#### Compiling ${ant.project.name}. ####
		</echo>
		<javac fork="true" debug="true" destdir="${build.dir}" srcdir="${src.dir}">
			<classpath refid="resolved.class.path" />
			<classpath refid="libdir.class.path" />
			<classpath path="${src.dir}" />
		</javac>
	</target>

	<!-- COMPILE TESTS -->
	<target name="compile-tests" description="Compiles JUnit tests" depends="compile, resolve-test">
		<delete dir="${tests.build.dir}" includeemptydirs="true" />
		<mkdir dir="${tests.build.dir}" />
		<javac fork="true" destdir="${tests.build.dir}" debug="on" deprecation="on" encoding="utf8">
			<src path="${tests.src.dir}" />
			<include name="**/*.java" />
			<classpath refid="test.class.path" />
			<classpath refid="libdir.class.path" />
			<classpath path="${build.dir}" />
			<compilerarg value="-Xlint:deprecation,-unchecked,fallthrough,path,serial,finally" />
		</javac>
	</target>

	<!-- RUN TESTS to STDOUT -->
	<target name="run-tests" depends="compile-tests" description="Runs JUnit tests and outputs to STDOUT">
		<echo level="info">
			#### Running unit tests for ${ant.project.name}. ####
		</echo>

		<junit fork="true" printsummary="yes" haltonfailure="yes">
			<sysproperty key="test.data.path" value="${basedir}/${test.data.path}" />
			<classpath refid="test.class.path" />
			<classpath path="${build.dir}" />
			<classpath path="${tests.build.dir}" />
			<classpath refid="libdir.class.path" />

			<formatter type="plain" usefile="false" />

			<batchtest fork="yes">
				<fileset dir="${tests.src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- RUN TESTS TO REPORTS.DIR -->
	<target name="run-tests-reportfile" depends="compile-tests" description="Runs JUnit tests and outputs to file.">
		<echo level="info">
			#### Running unit tests for ${ant.project.name}. ####
		</echo>
		<mkdir dir="${reports.dir}" />
		<junit fork="true" printsummary="yes" haltonfailure="yes">
			<sysproperty key="test.data.path" value="${basedir}/${test.data.path}" />
			<sysproperty key="ant.file" value="${ant.file}" />
			<classpath refid="test.class.path" />
			<classpath path="${build.dir}" />
			<classpath path="${tests.build.dir}" />
			<classpath refid="libdir.class.path" />

			<formatter type="xml" />

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${tests.src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- DETERMINE CODE COVERAGE OF UNIT TESTS -->
	<target name="run-code-coverage" depends="compile-tests, load-cobertura" description="Runs JUnit tests to track test coverage">
		<echo level="info">
			#### Determining unit test code coverage for ${ant.project.name}. ####
		</echo>

		<delete file="${cobertura.datafile}" />

		<cobertura-instrument datafile="${cobertura.datafile}" todir="${instrumented.classes.dir}">
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>

		<junit fork="true" printsummary="yes" haltonfailure="yes">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
			<sysproperty key="test.data.path" value="${basedir}/${test.data.path}" />
			<classpath refid="test.class.path" />
			<classpath refid="cobertura.class.path" />
			<classpath path="${instrumented.classes.dir}" />
			<classpath path="${build.dir}" />
			<classpath path="${tests.build.dir}" />
			<classpath refid="libdir.class.path" />

			<formatter type="plain" usefile="false" />

			<batchtest fork="yes">
				<fileset dir="${tests.src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<cobertura-report datafile="${cobertura.datafile}" format="html" destdir="${root.artifacts.dir}/unit-test-coverage/${ant.project.name}" srcdir="${src.dir}" />
	</target>

	<!-- MANIFEST -->
	<target name="manifest">
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>

		<manifest file="${manifest.file}">
			<attribute name="Built-By" value="BBN Technologies" />
			<attribute name="Build-Date" value="${TODAY}" />
		</manifest>
	</target>

	<!-- JAR -->
	<target name="jar" depends="compile, manifest" description="Builds project jar file">
		<jar manifest="${manifest.file}" basedir="${build.dir}" file="${jar.file}" includes="**/*.class" />
	</target>

	<!-- CHECKSTYLE -->
	<target name="checkstyle" depends="load-checkstyle">
		<mkdir dir="${reports.dir}" />
		<checkstyle config="${checkstyle.config}" failOnViolation="true">
			<classpath refid="checkstyle.class.path" />
			<formatter type="xml" tofile="${reports.dir}/${ant.project.name}-checkstyle-report.xml" />
			<fileset dir="${src.dir}" includes="com/bbn/**/*.java" />
			<property key="checkstyle.header.file" file="${checkstyle.java.header}" />
		</checkstyle>
	</target>

	<!-- JAVADOC -->
	<target name="javadoc" depends="resolve-compile" description="Generate Javadocs for this project">
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" classpathref="resolved.class.path" defaultexcludes="true" author="true" sourcepath="${src.dir}" windowtitle="API Documentation - ${ant.project.name}">
			<footer>
				<![CDATA[<em>Copyright $#169; 2010 Raytheon BBN Technologies. All Rights Reserved.</em>]]>
			</footer>
		</javadoc>
		<zip basedir="${javadoc.dir}" includes="**/*" file="${javadoc.zip.file}" />
	</target>

<!-- ======= IVY PUBLISHING TASKS ============= -->
<target name="publish-local" depends="jar" description="Publish this project to local repo as an integration build">
<echo level="info">
			#### Publishing ${ant.project.name} to local Ivy repository. ####
		</echo>
<ivy:publish 
	organisation="${project.organization}" 
	module="${ant.project.name}" 
	pubrevision="SNAPSHOT" 
	forcedeliver="true" 
	resolver="local" 
	overwrite="true" 
	status="integration" 
	artifactspattern="${artifacts.dir}/[artifact].[ext]" />
</target>

<target name="publish-release" depends="jar" description="Publish this project to public repo as a release with version ${release.version}">
	<fail 
		unless="release.version" 
		message="Publishing requires a version. Set the release.version property (e.g. ant publish-release -Drelease.version=1.0) - ${release.version}" />
	<ivy:publish 
		organisation="${project.organization}" 
		module="${ant.project.name}" 
		pubrevision="${release.version}" 
		forcedeliver="true" 
		resolver="loki-publish" 
		overwrite="true" 
		status="release" 
		artifactspattern="${artifacts.dir}/[artifact].[ext]" />
</target>

<target name="integration-build" depends="clean, run-tests, publish-local" description="Builds, tests, and publishes to local Ivy repo." />
<target name="continuous-build" depends="clean, run-tests-reportfile, run-code-coverage, publish-local, checkstyle" description="Builds, tests, publishes to local Ivy repo, and copies reports to root target." />
</project>
